{"ast":null,"code":"import _classCallCheck from \"/Users/ruslan/Desktop/petProjects/react-apps/re-store/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ruslan/Desktop/petProjects/react-apps/re-store/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ruslan/Desktop/petProjects/react-apps/re-store/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ruslan/Desktop/petProjects/react-apps/re-store/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ruslan/Desktop/petProjects/react-apps/re-store/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ruslan/Desktop/petProjects/react-apps/re-store/src/components/containers/book-list-container.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withBookstoreService } from '../hoc';\nimport { fetchBooks, addBookToCart as _addBookToCart } from '../../actions';\nimport { compose } from '../../utils';\nimport PropTypes from 'prop-types';\nimport Spinner from \"../spinner\";\nimport ErrorIndicator from \"../error-indicator\";\nimport BookList from \"../book-list\";\n\nvar BookListContainer = /*#__PURE__*/function (_Component) {\n  _inherits(BookListContainer, _Component);\n\n  function BookListContainer(props) {\n    _classCallCheck(this, BookListContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(BookListContainer).call(this, props));\n  }\n\n  _createClass(BookListContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var fetchBooks = this.props.fetchBooks;\n      fetchBooks();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          books = _this$props.books,\n          loading = _this$props.loading,\n          error = _this$props.error,\n          addBookToCart = _this$props.addBookToCart;\n\n      if (loading) {\n        return /*#__PURE__*/React.createElement(Spinner, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 14\n          }\n        });\n      }\n\n      if (error) {\n        return /*#__PURE__*/React.createElement(ErrorIndicator, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 14\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(BookList, {\n        books: books,\n        onBookAdded: addBookToCart,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 12\n        }\n      });\n    }\n  }]);\n\n  return BookListContainer;\n}(Component);\n\nBookListContainer.propTypes = {\n  booksLoaded: PropTypes.func,\n  booksRequested: PropTypes.func,\n  booksError: PropTypes.func,\n  loading: PropTypes.bool.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(_ref) {\n  var books = _ref.books,\n      loading = _ref.loading,\n      error = _ref.error;\n  return {\n    books: books,\n    loading: loading,\n    error: error\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch, _ref2) {\n  var bookstoreService = _ref2.bookstoreService;\n  return {\n    fetchBooks: fetchBooks(dispatch, bookstoreService),\n    addBookToCart: function addBookToCart(bookId) {\n      return dispatch(_addBookToCart(bookId));\n    }\n  };\n};\n\nexport default compose(withBookstoreService(), connect(mapStateToProps, mapDispatchToProps))(BookListContainer);","map":{"version":3,"sources":["/Users/ruslan/Desktop/petProjects/react-apps/re-store/src/components/containers/book-list-container.js"],"names":["React","Component","connect","withBookstoreService","fetchBooks","addBookToCart","compose","PropTypes","Spinner","ErrorIndicator","BookList","BookListContainer","props","books","loading","error","propTypes","booksLoaded","func","booksRequested","booksError","bool","isRequired","mapStateToProps","mapDispatchToProps","dispatch","bookstoreService","bookId"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,oBAAT,QAAqC,QAArC;AACA,SAASC,UAAT,EAAqBC,aAAa,IAAbA,cAArB,QAA0C,eAA1C;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,cAAP,MAA2B,oBAA3B;AACA,OAAOC,QAAP,MAAqB,cAArB;;IAEMC,iB;;;AACJ,6BAAYC,KAAZ,EAAmB;AAAA;;AAAA,0FACXA,KADW;AAElB;;;;wCAEmB;AAAA,UACVR,UADU,GACK,KAAKQ,KADV,CACVR,UADU;AAElBA,MAAAA,UAAU;AACX;;;6BAEQ;AAAA,wBAC0C,KAAKQ,KAD/C;AAAA,UACCC,KADD,eACCA,KADD;AAAA,UACQC,OADR,eACQA,OADR;AAAA,UACiBC,KADjB,eACiBA,KADjB;AAAA,UACwBV,aADxB,eACwBA,aADxB;;AAGP,UAAIS,OAAJ,EAAa;AACX,4BAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AAED,UAAIC,KAAJ,EAAW;AACT,4BAAO,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AAED,0BAAO,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAEF,KAAjB;AAAwB,QAAA,WAAW,EAAER,aAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;;;EAtB6BJ,S;;AAyBhCU,iBAAiB,CAACK,SAAlB,GAA8B;AAC5BC,EAAAA,WAAW,EAAEV,SAAS,CAACW,IADK;AAE5BC,EAAAA,cAAc,EAAEZ,SAAS,CAACW,IAFE;AAG5BE,EAAAA,UAAU,EAAEb,SAAS,CAACW,IAHM;AAI5BJ,EAAAA,OAAO,EAAEP,SAAS,CAACc,IAAV,CAAeC;AAJI,CAA9B;;AAOA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,OAA6B;AAAA,MAA3BV,KAA2B,QAA3BA,KAA2B;AAAA,MAApBC,OAAoB,QAApBA,OAAoB;AAAA,MAAXC,KAAW,QAAXA,KAAW;AACnD,SAAO;AACLF,IAAAA,KAAK,EAALA,KADK;AAELC,IAAAA,OAAO,EAAPA,OAFK;AAGLC,IAAAA,KAAK,EAALA;AAHK,GAAP;AAKD,CAND;;AAQA,IAAMS,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,SAAkC;AAAA,MAAtBC,gBAAsB,SAAtBA,gBAAsB;AAC3D,SAAO;AACLtB,IAAAA,UAAU,EAAEA,UAAU,CAACqB,QAAD,EAAWC,gBAAX,CADjB;AAELrB,IAAAA,aAAa,EAAE,uBAACsB,MAAD;AAAA,aAAYF,QAAQ,CAACpB,cAAa,CAACsB,MAAD,CAAd,CAApB;AAAA;AAFV,GAAP;AAID,CALD;;AAOA,eAAerB,OAAO,CACpBH,oBAAoB,EADA,EAEpBD,OAAO,CAACqB,eAAD,EAAkBC,kBAAlB,CAFa,CAAP,CAGbb,iBAHa,CAAf","sourcesContent":["import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport { withBookstoreService } from '../hoc'\nimport { fetchBooks, addBookToCart } from '../../actions';\nimport {compose} from '../../utils';\nimport PropTypes from 'prop-types';\nimport Spinner from \"../spinner\";\nimport ErrorIndicator from \"../error-indicator\";\nimport BookList from \"../book-list\";\n\nclass BookListContainer extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    const { fetchBooks } = this.props;\n    fetchBooks();\n  }\n\n  render() {\n    const { books, loading, error, addBookToCart } = this.props;\n\n    if (loading) {\n      return <Spinner />\n    }\n\n    if (error) {\n      return <ErrorIndicator />\n    }\n\n    return <BookList books={books} onBookAdded={addBookToCart}/>\n  }\n}\n\nBookListContainer.propTypes = {\n  booksLoaded: PropTypes.func,\n  booksRequested: PropTypes.func,\n  booksError: PropTypes.func,\n  loading: PropTypes.bool.isRequired\n}\n\nconst mapStateToProps = ({books, loading, error}) => {\n  return {\n    books,\n    loading,\n    error\n  }\n}\n\nconst mapDispatchToProps = (dispatch, {bookstoreService}) => {\n  return {\n    fetchBooks: fetchBooks(dispatch, bookstoreService),\n    addBookToCart: (bookId) => dispatch(addBookToCart(bookId))\n  }\n}\n\nexport default compose(\n  withBookstoreService(),\n  connect(mapStateToProps, mapDispatchToProps)\n)(BookListContainer);"]},"metadata":{},"sourceType":"module"}