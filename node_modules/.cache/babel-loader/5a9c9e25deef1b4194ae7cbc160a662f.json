{"ast":null,"code":"import _toConsumableArray from \"/Users/ruslan/Desktop/petProjects/react-apps/re-store/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/ruslan/Desktop/petProjects/react-apps/re-store/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar initialState = {\n  bookList: {\n    books: [],\n    loading: true,\n    error: null\n  },\n  shoppingCart: {\n    cartItems: [],\n    orderTotal: 180\n  }\n};\n\nvar updateBookList = function updateBookList(state, action) {\n  switch (action.type) {\n    case 'FETCH_BOOKS_SUCCESS':\n      return {\n        books: action.payload,\n        loading: false,\n        error: null\n      };\n\n    case 'FETCH_BOOKS_REQUEST':\n      return {\n        books: [],\n        loading: true,\n        error: null\n      };\n\n    case 'FETCH_BOOKS_FAILURE':\n      return {\n        books: [],\n        loading: false,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nvar updateShoppingCart = function updateShoppingCart(state, action) {\n  switch (action.type) {\n    case 'ADD_BOOK_TO_CART':\n      return _objectSpread({}, state, {\n        shoppingCart: updateOrder(state, action.payload, 1)\n      });\n\n    case 'REMOVE_BOOK_FROM_CART':\n      return _objectSpread({}, state, {\n        shoppingCart: updateOrder(state, action.payload, -1)\n      });\n\n    case 'REMOVE_ALL_BOOKS_FROM_CART':\n      var book = state.cartItems.find(function (_ref) {\n        var id = _ref.id;\n        return id === action.payload;\n      });\n      return _objectSpread({}, state, {\n        shoppingCart: updateOrder(state, action.payload, -book.count)\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar updateCartItems = function updateCartItems(cartItems, newItem, idx) {\n  if (newItem.count === 0) {\n    return [].concat(_toConsumableArray(cartItems.slice(0, idx)), _toConsumableArray(cartItems.slice(idx + 1)));\n  }\n\n  if (idx < 0) {\n    return [].concat(_toConsumableArray(cartItems), [newItem]);\n  } else {\n    return [].concat(_toConsumableArray(cartItems.slice(0, idx)), [newItem], _toConsumableArray(cartItems.slice(idx + 1)));\n  }\n};\n\nvar updateCartItem = function updateCartItem(book) {\n  var item = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var quantity = arguments.length > 2 ? arguments[2] : undefined;\n  var _item$id = item.id,\n      id = _item$id === void 0 ? book.id : _item$id,\n      _item$title = item.title,\n      title = _item$title === void 0 ? book.title : _item$title,\n      _item$count = item.count,\n      count = _item$count === void 0 ? 0 : _item$count,\n      _item$total = item.total,\n      total = _item$total === void 0 ? 0 : _item$total;\n  return {\n    id: id,\n    title: title,\n    count: count + quantity,\n    total: total + quantity * book.price\n  };\n};\n\nvar updateOrder = function updateOrder(state, id, quantity) {\n  var books = state.bookList.books,\n      cartItems = state.shoppingCart.cartItems; // Сохраняем тело книги из массива books\n\n  var book = books.find(function (item) {\n    return item.id === id;\n  }); // Получаем индекс\n\n  var indexInCart = cartItems.findIndex(function (item) {\n    return item.id === id;\n  }); // Получем элемент из корзины по индксу, если элемента нет, то item будет undefined\n\n  var item = cartItems[indexInCart];\n  var newItem = updateCartItem(book, item, quantity); //  Если элемент есть, то мы его модифицируем, и ставляем его в середину массива\n\n  return _objectSpread({}, state, {\n    cartItems: updateCartItems(cartItems, newItem, indexInCart)\n  });\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return {\n    bookList: updateBookList(state.bookList, action),\n    shoppingCart: updateShoppingCart(state.bookList, action)\n  };\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/ruslan/Desktop/petProjects/react-apps/re-store/src/reducers/index.js"],"names":["initialState","bookList","books","loading","error","shoppingCart","cartItems","orderTotal","updateBookList","state","action","type","payload","updateShoppingCart","updateOrder","book","find","id","count","updateCartItems","newItem","idx","slice","updateCartItem","item","quantity","title","total","price","indexInCart","findIndex","reducer"],"mappings":"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","sourcesContent":["const initialState = {\n  bookList: {\n    books: [],\n    loading: true,\n    error: null,\n  },\n  shoppingCart: {\n    cartItems: [],\n    orderTotal: 180\n  },\n}\n\nconst updateBookList = (state, action) => {\n  switch (action.type) {\n    case 'FETCH_BOOKS_SUCCESS':\n      return {\n        books: action.payload,\n        loading: false,\n        error: null,\n      };\n    case 'FETCH_BOOKS_REQUEST':\n      return {\n        books: [],\n        loading: true,\n        error: null,\n      };\n    case 'FETCH_BOOKS_FAILURE':\n      return {\n        books: [],\n        loading: false,\n        error: action.payload\n      }\n    default:\n      return state\n  }\n}\n\nconst updateShoppingCart = (state, action) => {\n  switch (action.type) {\n    case 'ADD_BOOK_TO_CART':\n      return {\n        ...state,\n        shoppingCart: updateOrder(state, action.payload, 1)\n      };\n    case 'REMOVE_BOOK_FROM_CART':\n      return {\n        ...state,\n        shoppingCart: updateOrder(state, action.payload, - 1)\n      };\n    case 'REMOVE_ALL_BOOKS_FROM_CART':\n      const book = state.cartItems.find(({id}) => id === action.payload);\n      return {\n        ...state,\n        shoppingCart: updateOrder(state, action.payload, -book.count)\n      }\n    default:\n      return state\n  }\n}\n\n\nconst updateCartItems = (cartItems, newItem, idx) => {\n  if (newItem.count === 0) {\n    return [\n      ...cartItems.slice(0, idx),\n      ...cartItems.slice(idx + 1),\n    ]\n  }\n\n  if (idx < 0) {\n    return [\n      ...cartItems,\n      newItem\n    ]\n  } else {\n    return [\n      ...cartItems.slice(0, idx),\n      newItem,\n      ...cartItems.slice(idx + 1),\n    ]\n  }\n}\nconst updateCartItem = (book, item = {}, quantity) => {\n\n  const {id = book.id, title = book.title, count = 0, total = 0} = item;\n    return {\n      id,\n      title,\n      count: count + quantity,\n      total: total + quantity * book.price,\n    }\n}\n\nconst updateOrder = (state, id, quantity) => {\n  const {bookList: {books}, shoppingCart: {cartItems}} = state;\n  // Сохраняем тело книги из массива books\n  const book = books.find((item) => item.id === id);\n  // Получаем индекс\n  const indexInCart = cartItems.findIndex((item) => item.id === id);\n  // Получем элемент из корзины по индксу, если элемента нет, то item будет undefined\n  const item = cartItems[indexInCart];\n  let newItem = updateCartItem(book, item, quantity)\n  //  Если элемент есть, то мы его модифицируем, и ставляем его в середину массива\n  return {\n    ...state,\n    cartItems: updateCartItems(cartItems, newItem, indexInCart),\n  };\n}\n\nconst reducer = (state = initialState, action) => {\n  return {\n    bookList: updateBookList(state.bookList, action),\n    shoppingCart: updateShoppingCart(state.bookList, action)\n  }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}